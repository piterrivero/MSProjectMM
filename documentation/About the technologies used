1.- Microservices with spring boot

2.- Spring cloud config server: in order to have the configuration files centralized in a hithub repository.
    for this scope the applications.yml of each project are in the config-data folder, and in this project
    there is a bootstrap.yml file indicating the github repository and path where to find the configurations.

3.- Service discovery eureka

4.- Api gateway: in order to have an unique endpoint (one unique port Ej. 8080 for all the services)

5.- Resilience4j to manage the resilience of the services, this provide mechanisms of cirquit break (@CircuitBreaker, making possible
    to catch any problem when one service call other and making available a fallbackMethod to call in this cases) and
    retry (@Retry to make possible the retry of a call when there is any problem calling a service). These examples can be
    verified on the microservice band-service in the BandController file (this is where they are used) and in the folder config-data
    in the file band-service.yaml (this is where there is the configuration).
    
6.- Kafka: Some of the calls service to service are asyncronous so for this issue it was used kafka. You can see in each
    save, update or delete of band, genre or disc for example the send notification message and in the notifications
    service the listener of that topic.

7.- ELK (Elastic search, logstash, kibana) to have the logs centralizes. On the docker folder, inside the MSProjectMMCommons
    there is a folder called logstash, this folder will be mounted inside the logstash container and in the config folder
    you can see an example of configuration file and in the pipeline an example of a simle pipeline

8.- Zipkin Sleuth: It is used to the distribiuted traced of the microservices and their interactions. In the yml files of the
    microservices it can be saw the example of the simple configuration.

9.- JIB: to dockerize the service we are using the JIB plugin. It is configured in the parent pom.xml and follow the
    command "mvn clean compile jib:build" the project is compiled and upload to the dockerhub configured in the
    plugin configuration. In this way afterward it can be download when it is added on some docker-compose.yml.
    See the docker-compose-msproject.xml found inside the MSProjectMMService folder.

